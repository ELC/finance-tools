from datetime import datetime, timedelta

import numpy as np
import matplotlib.pyplot as plt


__description__ = """
This application adjust an initial capital for inflation. Inflation can be
given by providing an optimistic (minimum), a pesimistic (maximum) and a
realistic (mode) estimate.

The compounding frequency can be either annually (by default) or daily (with
the checkbox marked), The results are similar but the interpretation of the
rates is different when using daily compounding.

The upper and lower bound are generated by a Monte Carlo Simulation assuming
that each day the inflation is triangularly distributed.
"""

def inflation_simulation(st, **state):
    st.title("Inflation Simulation")
    st.write(__description__)

    st.write("## Initial Capital")
    initial_capital = st.number_input("Capital", value=10_000.0)

    st.write("## Inflation Estimation")

    left, middle, right = st.columns(3)
    
    optimistic = left.number_input("Optimistic Inflation (%)", value=2.0, min_value=0.0)

    realistic_value = max(2.5, optimistic + 0.01)
    realistic = middle.number_input("Realistic Inflation (%)", value=realistic_value, min_value=optimistic)

    pesimistic_value = max(3.5, realistic + 0.01)
    pesimistic = right.number_input("Pesimistic Inflation (%)", value=pesimistic_value, min_value=realistic)

    daily_conpound = st.checkbox("Daily Compounding", value=False)

    years = st.slider("Years", min_value=1, max_value=15, value=2)

    st.write("## Simulation Results")

    median_capital, min_capital, max_capital = simulate_inflation(initial_capital, optimistic, realistic, pesimistic, years, daily_conpound)

    st.write("### Capital at the End")

    left, middle, right = st.columns(3)

    max_delta = (initial_capital - max_capital[-1]) / initial_capital * 100
    left.metric("Optimistic Case", f"${max_capital[-1]:.2f}", f"-{max_delta:.2f}%")

    min_delta = (initial_capital - min_capital[-1]) / initial_capital * 100
    right.metric("Pesimistic Case", f"${min_capital[-1]:.2f}", f"-{min_delta:.2f}%")

    median_delta = (initial_capital - median_capital[-1]) / initial_capital * 100
    middle.metric("Realistic Case", f"${median_capital[-1]:.2f}", f"-{median_delta:.2f}%")

    st.write("### Capital over Time in 'Today Money'")
    plot_comparison(st, median_capital, min_capital, max_capital)


def simulate_inflation(initial_capital, optimistic, realistic, pesimistic, years, daily_conpound):
    runs = 1_000
    days = years * 365
    data = np.tile(initial_capital, (runs, days))

    fraction = 365 if daily_conpound else 1

    optimistic_rate = (optimistic / 100) / fraction
    realistic_rate = (realistic / 100) / fraction
    pesimistic_rate = (pesimistic / 100) / fraction
    
    generator = np.random.default_rng()
    rate = generator.triangular(optimistic_rate, realistic_rate, pesimistic_rate, size=(runs, days))

    interest_rate = rate if daily_conpound else rate / 365 * np.linspace(1, 365, days)
    exponent = np.arange(days) if daily_conpound else years

    rate_compound = (1 + interest_rate) ** exponent

    data /= rate_compound

    median_data = np.median(data, axis=0)
    minimum_bound = np.quantile(data, 0.05, axis=0)
    maximum_bound = np.quantile(data, 0.95, axis=0)

    return median_data, minimum_bound, maximum_bound


def plot_comparison(st, median_capital, min_capital, max_capital):
    plt.style.use("bmh")

    fig = plt.figure(figsize=(16, 6))

    positions = np.arange(len(median_capital))

    plt.plot(positions, median_capital, alpha=0.6)
    plt.fill_between(positions, min_capital, max_capital, alpha=0.2)

    for day in range(364, len(median_capital), 364):
        plt.axvline(day, color="darkgray", ls="--")
    
    plt.xlim(0, len(median_capital))

    plt.title("Real Value over Time Adjusted for Inflation", fontsize=20)
    plt.tight_layout()

    st.pyplot(fig)
